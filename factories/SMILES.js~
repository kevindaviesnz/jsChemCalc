
const canonicalSMILES = function() => {

            const isLastAtom = function(atom, atoms, logger) {

                Typecheck(
                    {name: "atom", value: atom, type: "array"},
                    {name: "logger", value: logger, type: "object"},
                )
                const atom_ids = atoms.map((a)=>{
                    return a.atomId
                })

                return  atom_ids.indexOf(atom.atomId) === atoms.length -1

            }


    
}

const SMILES = function (atoms_no_hydrogens, ringbond_count, used_atom_ids, branch_number, logger) {

                Typecheck(
                    {name: "atoms_no_hydrogens", value: atoms_no_hydrogens, type: "array"},
                    {name: "ringbond_count", value: ringbond_count, type: "number"},
                    {name: "used_atom_ids", value: used_atom_ids, type: "array"},
                    {name: "branch_number", value: branch_number, type: "number"},
                    {name: "logger", value: logger, type: "object"}
                )

                const smiles = []
                let atoms_ordered = []


                let ring_bond_number = 1

                // Get first end of branch atom
                const first_end_of_branch_atom = _.find(atoms_no_hydrogens, (a)=>{
                    return a.isTerminalAtom(atoms_no_hydrogens)
                })

                if (undefined === first_end_of_branch_atom) {
                    atoms_ordered = atoms_no_hydrogens
                } else {
                    
                    let atoms_no_hydrogens_copy = _.cloneDeep(atoms_no_hydrogens)
                    
                    // Add first end of branch atom to ordered atoms
                    atoms_ordered.push(first_end_of_branch_atom)
                    
                    // Remove first end of branch atom from atoms
                    _.remove(atoms_no_hydrogens_copy, (a)=>{
                        return a.atomId === first_end_of_branch_atom.atomId
                    })

                    // Re-order atoms.
                    do {

                        const atoms_ordered_atom_ids = atoms_ordered.map((a)=>{
                            return a.atomId
                        })

                        // Get the last atom in the ordered atoms array that is not
                        // an end of branch atom AND has unresolved bonds
                        const parent_atom = _.find(_.cloneDeep(atoms_ordered).reverse(), (a)=>{
                            const bonds = a.bonds(atoms_no_hydrogens_copy) // This will give us only unresolved bonds as we are removing atoms from atoms_no_hydrogens_copy
                            return bonds.length > 0                            
                        })

                        if (undefined !== parent_atom) {
                            // Get atoms bonded to parent atom that are end of branch atoms
                            // Favour double bonds
                            let end_of_branch_double_bonds = undefined // this is misleading
                            end_of_branch_double_bonds =  _.filter(parent_atom.doubleBonds(atoms_no_hydrogens), (b)=>{
                                // 22 Feb 2023 Added -1 === atoms_ordered_atom_ids.indexOf(b.atom.atomId) &&
                                return -1 === atoms_ordered_atom_ids.indexOf(b.atom.atomId) && isEndOfBranchAtom(b.atom, atoms_no_hydrogens) // 25 Jan 16:44
                                //return b.atom.isTerminalAtom(atoms_no_hydrogens)
                            })
                            let end_of_branch_single_bonds = undefined 
                            // Added 24 Feb
                            end_of_branch_single_bonds =  _.filter(parent_atom.singleBonds(atoms_no_hydrogens), (b)=>{
                                return -1 === atoms_ordered_atom_ids.indexOf(b.atom.atomId) && isEndOfBranchAtom(b.atom, atoms_no_hydrogens)
                            })
                            let end_of_branch_bonds = [...end_of_branch_double_bonds, ...end_of_branch_single_bonds]
                            if (end_of_branch_bonds.length > 0) { //  undefined === end_of_branch_bond

                                // 24 Feb 2023
                                end_of_branch_bonds.map((b)=>{
                                    if (-1 === atoms_ordered_atom_ids.indexOf(b.atom.atomId)) {
                                        // Add to ordered atoms and remove from atoms_no_hydrogens_copy
                                        atoms_ordered.push(b.atom)
                                        _.remove(atoms_no_hydrogens_copy, (a)=>{
                                            return a.atomId === b.atom.atomId
                                        })
        
                                    }
                                    return b
                                })
                                /*
                                // 10 Feb 2023 - Does not work for m as results in C1C1
                                let atoms_no_hydrogens_minus_atoms_ordered = atoms_no_hydrogens.filter((a)=>{
                                    return atoms_ordered_atom_ids.indexOf(a.atomId) === -1
                                   // return true
                                })
                                //let atoms_no_hydrogens_minus_atoms_ordered = atoms_no_hydrogens
                                end_of_branch_bond =_.find(parent_atom.bonds(atoms_no_hydrogens_minus_atoms_ordered), (b)=>{
                                 return isEndOfBranchAtom(b.atom, atoms_no_hydrogens_minus_atoms_ordered) // 25 Jan 16:44
                             //    return b.atom.isTerminalAtom(atoms_no_hydrogens_copy)
                                })
                                */
                            }
                            // 24 Feb 2023
                            if (false) { // undefined !== end_of_branch_bond
                                atoms_ordered.push(end_of_branch_bond.atom)
                                // Remove end of branch atom from atoms_no_hydrogens_copy array
                                _.remove(atoms_no_hydrogens_copy, (a)=>{
                                    return a.atomId === end_of_branch_bond.atom.atomId
                                })
                            } else {
                                let parent_bonds = undefined
                                let bonded_atom = undefined
                                parent_bonds = parent_atom.doubleBonds(atoms_no_hydrogens_copy)
                                if (parent_bonds.length === 0) {
                                    parent_bonds = parent_atom.bonds(atoms_no_hydrogens_copy)
                                }
                                if (parent_bonds.length > 0) {
                                    bonded_atom = parent_bonds[0].atom
                                    if (undefined !==bonded_atom) {
                                        atoms_ordered.push(bonded_atom)
                                    }
                                     // Remove end of branch atom from atoms_no_hydrogens_copy array
                                    _.remove(atoms_no_hydrogens_copy, (a)=>{
                                        return a.atomId === bonded_atom.atomId
                                    })
                                }

                            }
                            // Remove parent atom from atoms_no_hydrogens_copy array
                            _.remove(atoms_no_hydrogens_copy, (a)=>{
                                return a.atomId === parent_atom.atomId
                            })
                        }

                    } while(atoms_no_hydrogens_copy.length > 0)

                }

                atoms_no_hydrogens = atoms_ordered

                const all_branches = branches(atoms_no_hydrogens)

                let atom_index = 0
                // Feb 11
                let i = 0
                let atom = undefined
                let used_rings = []
                let safety = 0

                // Add ringbonds
                do {

                    atom = atoms_no_hydrogens[atom_index]

                    if (typeof atom === "string") {
                        smiles.push(atom) // ringbond number
                    } else if (typeof atom === "object" && used_atom_ids.indexOf(atom.atomId) ==-1) {

                        // Note that the first atom can have more than one bond eg benzene ring
                        smiles.push(atom)

                        if (typeof atom === "object") {

                            const bonds = atom.bonds(atoms_no_hydrogens.filter((a)=>{
                                return typeof a !== "string"
                            }))
                            let ring = undefined
                            // Ringbonds
                            if (
                                (atom_index === 0 && bonds.length > 1)
                                || (atom_index > 0 && bonds.length > 2)
    
                            ) {
                                // Get rings but don't include rings where the second to last atom is the atom after the current atom in the atoms_no_hydrogens array
                                // Also don't include rings that have already been used
                                const rings = __findRingsv2(atom, atoms, [[atom]]).filter((r)=>{
                                    // Check that the ring has not already been used
                                    // 13 Feb 2023
                                    const r_copy = _.cloneDeep(r)
                                    r_copy.pop()
                                    const r_ids = r_copy.map((a)=>{
                                        return a.atomId
                                    })
                                    // Feb 13 2023
                                    const same_ring = _.find(used_rings, (used_ring)=>{
                                        if (r_copy.length !== used_ring.length) {
                                            return false
                                        }
                                        const used_ring_ids = used_ring.map((a)=>{
                                            return a.atomId
                                        })
                                        const intersection =  _.intersection(used_ring_ids, r_ids)
                                        return used_ring.length === r_copy.length && intersection.length === used_ring.length
                                    })
                                    // Feb 13 2023
                                    if (undefined !== same_ring) {
                                        return false
                                    }
                                    const next_atom = __getNextAtom(atom_index, atoms_no_hydrogens)
                                    const ring_atom = r[r.length-2]
                                    return ring_atom.atomId !== next_atom.atomId
                                })
                                // Look for first branch that starts with the current atom and ends with the current atom.
                                // This will always be the shortest matching ring.
                                if (rings.length > 0) {
                                    ring = rings[0]
                                    // We don't want to store the ring with the main ring atom added twice eg 1,2,3,4,1 --> 1,2,3,4. Otherwise finding matches won't work.
                                    const ring_copy = _.cloneDeep(ring)
                                    ring_copy.pop()
                                    used_rings.push(ring_copy)
                                }
    
                                if (undefined !== ring) {
                                    // Add ringbond number to smiles
                                    smiles.push(ring_bond_number+'')
                                    // Add ringbond number just after the atom matching the second to last atom id in the ring, to atoms_no_hydrogens
                                    const child_ring_atom = ring[ring.length-2]
                                    const child_ring_bond_index = _.findIndex(atoms_no_hydrogens, (a)=>{
                                        return typeof a === 'object' && a.atomId === child_ring_atom.atomId
                                    })
                                    //atoms_no_hydrogens.indexOf(ring[ring.length-2])
                                    atoms_no_hydrogens.splice(
                                        child_ring_bond_index + 1,
                                        0,
                                        ring_bond_number+''
                                    )
                                    ring_bond_number++
                                }
            
                            }
    
                        }

                    }

                    atom_index++
                    safety++

                } while(undefined !== atoms_no_hydrogens[atom_index] && safety < 50)

            //    console.log(safety)
            //    if (safety === 50) {
              //      x = 100
              //  }

            
                // Add branches
                // At this point ringbonds have been added.
                // Do not do after adding ring bond types.
                const smiles_atoms = _.cloneDeep(smiles)
                const used_bond_ids = []
                for (let atom_index = 0; atom_index < smiles_atoms.length; atom_index++) {
                    const atom = smiles_atoms[atom_index]
                    if (typeof atom !== "string") {
                        used_bond_ids.push(atom.atomId)
                        const bonds = atom.bonds(
                            smiles_atoms.filter((a)=>{
                                return typeof a === 'object'
                            })
                        ).filter((b)=>{
                            return used_bond_ids.indexOf(b.atom.atomId) === -1
                        })
                        if (bonds.length > 1
                        ){
                            // Branches
                            // Check for ring.
                            // 15 Feb 2023
                            //const rings = __findRingsv2(atom, atoms, [[atom]])
                            // Note: We can do this because we haven't added bond types yet.
                            const atom_index = atom.atomIndex(smiles)
                            const next_atom = __getNextAtom(atom_index, smiles)
                            const next_atom_index = next_atom.atomIndex(smiles)
                            const offset = typeof smiles[atom_index+1] === "string"?next_atom_index - atom_index - 1:0
                            // 15 Feb 2023
                            //if (bonds.length - (rings.length / 2) > 1) {
                            if (bonds.length - offset > 1) {
                                let start_of_branch_index = _.findIndex(smiles, (a)=>{
                                    return typeof a === "object" && a.atomId === atom.atomId
                                }) + offset

                                for (let k = 0; k < bonds.length -1; k++) {
                                    
                                    const bond = bonds[k]
                                    // Add ')'
                                    // 16 Feb - do this before adding ')'
                                    let end_of_branch_index = null
                                    // Terminal atom?
                                    // 20 Feb 2023
                                    // Changed from "if (k === 0 && bond.atom.isTerminalAtom(smiles.filter((a)=>{""
                                    if (bond.atom.isTerminalAtom(smiles.filter((a)=>{
                                        return typeof a === "object"
                                    }))) {
                                        end_of_branch_index = bond.atom.atomIndex(smiles) + 1
                                    } else {
                                        // Get branches where the first atom is atom and the second atom is the current bond
                                        const atom_bond_branches = all_branches.filter((branch)=>{
                                            return branch.length > 2 && branch[0] !== branch[branch.length-1] && branch[0] === atom.atomId && branch[1] === bond.atom.atomId
                                        })
                                        if (atom_bond_branches.length > 0) {
                                            const branch = atom_bond_branches[0]
                                            const end_of_branch_atom = atoms_no_hydrogens.getAtomByAtomId(branch[branch.length-1])
                                            end_of_branch_index = end_of_branch_atom.atomIndex(smiles) +1
                                            // Added 16 Feb
                                            if (typeof smiles[end_of_branch_index+1]==="string") {
                                                // @todo Should use '_getNextAtom()'
                                                end_of_branch_index = end_of_branch_index + 2
                                            }
                                        }
                                    }

                                    // Add '(' 
                                    if (null !== end_of_branch_index) {
                                        smiles.splice(
                                            end_of_branch_index,
                                            0,
                                            ')'
                                        )
                                        smiles.splice(
                                            start_of_branch_index + 1,
                                            0,
                                            '('
                                        )
                                        start_of_branch_index = end_of_branch_index +1
                                    }

                                    /*
                                    // 15 Feb 2023 Added "+ (offset > 0?offset+1:offset)"
                                    // 15 Feb 2023 - test for branch terminal atom
                                    let end_of_branch_index = null
                                    if (k === 0 && bond.atom.isTerminalAtom(smiles.filter((a)=>{
                                        return typeof a === "object"
                                    }))) {
                                        end_of_branch_index = bond.atom.atomIndex(smiles) + 1
                                    } else {
                                        end_of_branch_index = _.findIndex(smiles, (a)=>{
                                            // 16 Feb 2023
                                            const next_atom = __getNextAtom(bond.atom.atomIndex(smiles), smiles)
                                            const next_atom_index = next_atom.atomIndex(smiles)
                                            if (a.atomId === next_atom.atomId) {
                                                if ( typeof smiles[atom_index+1] === "string" && typeof smiles[next_atom_index+1] === "string" && smiles[atom_index+1] === smiles[next_atom_index+1]) {
                                                    // Here the "end of branch" atom is also the end of ring. 
                                                }
                                            } else {
                                                return false
                                            }
                                        }) + (offset > 0?offset+1:offset)
                                    }
                                    */

                                }

    
                            }
                        }
                    }
                }

                // Add bond types
                // This should be done after adding branches.
                const used_atom_bond_ids = []
                for (let atom_index = 0; atom_index < smiles_atoms.length; atom_index++) {
                    const atom = smiles_atoms[atom_index]
                    if (typeof atom === "object") {
                        if (used_atom_bond_ids.indexOf(atom.atomId===-1)) {
                            const bonds = atom.bonds(atoms_no_hydrogens.filter((a)=>{
                                return typeof a === 'object'
                            })).filter((b)=>{
                                return used_atom_bond_ids.indexOf(b.atom.atomId) == -1
                            })
                            for (let k=0; k < bonds.length; k++) {
                                const bond = bonds[k]
                                // Get index of the bonded atom
                                if (bond.bond_type !== '') {
                                    const bonded_atom_index = bond.atom.atomIndex(smiles)
                                    let offset = 0
                                    const smiles_atom_index = atom.atomIndex(smiles)
                                    // Check if the item after the bonded atom is a ring bond number
                                    // 11 Feb
                                    // benzene
                                    // if (typeof smiles[smiles_atom_index+1] === "string" && smiles[smiles_atom_index+1] !== '(' && smiles[smiles_atom_index+1] !== ')') {
                                    if (typeof smiles[smiles_atom_index+1] === "string" && smiles[smiles_atom_index+1] !== '(' && smiles[smiles_atom_index+1] !== ')') {
                                        // Only add offset if child ringbond
                                        const ring_bond_number = smiles[bonded_atom_index+1];
                                        const parent_ring_bond_number_index = _.findIndex(smiles, (item)=>{
                                            return item === ring_bond_number
                                        })
                                        // Feb 11
                                        // Benzene C1=CC=CC=C1
                                        // if (smiles[parent_ring_bond_number_index] !== smiles[bonded_atom_index+1]) {
                                        // m
                                        // if (parent_ring_bond_number_index !== bonded_atom_index) {
                                        if (parent_ring_bond_number_index < bonded_atom_index+1) {
                                            offset++
                                        }
                                    }
                                    smiles.splice(
                                        bonded_atom_index + offset,
                                        0,
                                        bond.bond_type
                                    )
                                }
                            }
                            used_atom_bond_ids.push(atom.atomId)
                        }
                    }
                }
                /*
                for (let atom_index = 0; atom_index < smiles_atoms.length; atom_index++) {
                    const atom = smiles_atoms[atom_index]
                    if (typeof atom !== "string") {
                        let bond_type =  __getBondType(atom, atom_index, smiles_atoms)
                        if ('' !== bond_type) {
                            const next_atom = __getNextAtom(atom_index, smiles_atoms)
                            const next_atom_index = _.findIndex(smiles, (a)=>{
                                return typeof a === "object" && a.atomId === next_atom.atomId
                            })
                            smiles.splice(
                                next_atom_index,
                                0,
                                bond_type
                            )
                        }
                    }
                }
                */


                if (false) {
                for (let atom_index = 0; atom_index < smiles.length; atom_index++) {
                    const atom = smiles[atom_index]
                    // Atom has not already been added
                    if (used_atom_ids.indexOf(atom.atomId) ==-1) {
                        // Note that the first atom can have more than one bond eg benzene ring
                        // addAtomToSmiles(smiles, atom, atoms_no_hydrogens, used_atom_ids, logger)
                        let s = atomBondType(
                            atom,
                            atoms_no_hydrogens,
                            used_atom_ids,
                            logger
                        )
                        if ('' !== s) {
                            smiles.push(s)
                        }

                        smiles.push(atom)

                       const end_of_branch = isEndOfBranchAtom(atom, atoms_no_hydrogens)

                       // Check for parent ringbond
                       // b = branches
                       const parent_ringbond_atom = __scanForParentRingBondAtom(smiles, b, atom, true, logger)
                       if (undefined !== parent_ringbond_atom) {                            
                            // If the parent ringbond atom is not undefined then there will be a '('
                            // immediately after it in the smiles array.
                            // We remove the '(' and replace it with the current ringbond number.
                            const parent_ringbond_atom_position_in_smiles = _.findIndex(smiles, (atom)=>{
                                return typeof atom === "object" && atom.atomId === parent_ringbond_atom.atomId
                            })
                            // Remove '('
                            if (branch_number > 0 && smiles[parent_ringbond_atom_position_in_smiles+1] === '(') {
                                smiles[parent_ringbond_atom_position_in_smiles+1] = ring_bond_number+''
                            } else {
                                smiles.splice(parent_ringbond_atom_position_in_smiles + 1, 0, ring_bond_number+'')
                            }
                            const bond = _.find(atom.bonds(atoms_no_hydrogens), (bond)=>{
                                return bond.atom.atomId === parent_ringbond_atom.atomId
                            })
                            if (bond.bond_type !=='') {
                                smiles.push(bond.bond_type)
                            }
                            smiles.push(ring_bond_number+'')
                            // Remove branches that have the parent ringbond atom and the child ringbond atom
                            // 25 Jan 17:44 Removed as now done in  __findMatchingRingBranch()
                            /*
                            _.remove(b, (branch)=>{
                                return  -1 !== branch.indexOf(parent_ringbond_atom.atomId) && -1 !== branch.indexOf(atom.atomId)
                            })
                            */
                            ring_bond_number++
                        }

                        // Get child bonds but if there is a ring branch ignore bond atom with id equal to the second to last item in the ring branch
                        let child_bonds = childBonds(atom, atoms_no_hydrogens, used_atom_ids, logger)

                        // Continue processing if we have more than one bond
                        if (child_bonds.length > 1) {
                            smiles.push('(')
                            branch_number++
                        } else {
                           
                            if (end_of_branch && branch_number > 0) {
                                smiles.push(')')
                                branch_number--
                            }
                        }

                        used_atom_ids.push(atom.atomId)
                

                    }
    
                }
                }   

                // Add charges and return smiles
                return smiles.map((atom)=>{
                    if (typeof atom === "object") {
                        const smiles_atoms = smiles.filter((a)=>{
                            return typeof a === "object"
                        })                        
                       // let s = atomBondType(atom, smiles_atoms, used_atom_ids, logger)
                       let s = ''
                        const charge = atom.charge(atoms_no_hydrogens, logger)
                        if (charge !==0 || standard_atom_symbols.indexOf(atom.atomicSymbol) === -1) {
                            s +='['
                        } 
                        s+=atom.atomicSymbol
                        if (debug) {
                            s = s + '{' + atom.atomId + '}'
                        }
                        if (charge === 1) {
                            s+='+'
                        }
                        if (charge === -1) {
                            s+='-'
                        }
                        if (charge !==0 || standard_atom_symbols.indexOf(atom.atomicSymbol) === -1) {
                            s+=']'
                        } 
                        atom = s
                    }
                    return atom

                })

}

